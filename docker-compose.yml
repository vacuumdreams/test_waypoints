version: '3'
services:
  db:
    image: postgres
    restart: always
    environment:
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_DB=waypoints
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 30s
      retries: 5
  migrate:
      image: migrate/migrate
      volumes:
        - .:/migrations
      command: ["-path", "/migrations/api/db/migrations", "-database",  "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/waypoints?sslmode=disable", "up", "3"]
      links:
        - db
      depends_on:
        db:
          condition: service_healthy
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - POSTGRES_DB=waypoints
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
    links:
      - db:db
    depends_on:
      db:
        condition: service_healthy
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - API=http://${HOST}:80
    ports:
      - "8080:8080"
    depends_on:
      - api
  nginx:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    links:
      - db:db
    environment:
      - HOST=${HOST}
    depends_on:
      - api
      - web
    links:
      - api:api
      - web:web
    ports:
      - "80:80"
volumes:
  data:
