openapi: 3.0.0
info:
  title: Waypoint API
  description: Waypoint storage goserver
  version: 1.0.0
servers:
  - url: http://localhost:8001/api/v1
    description: Local server url
paths:
  /waypoints/{user}:
    get:
      tags:
        - waypoint
      summary: Returns the list of saved waypoints.
      operationId: list
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: string
            example: 'testId'
      responses:
        '200':
          description: A collection of waypoints.
          content:
            application/json:
              schema:
                type: array
                maxItems: 10
                x-count: 3
                items:
                  $ref: '#/components/schemas/SavedWaypoint'
    put:
      tags:
        - waypoint
      summary: Updates waypoint order.
      operationId: updateOrder
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: string
            example: 'testId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 10
              items:
                $ref: '#/components/schemas/WaypointOrder'
      responses:
        '200':
          description: Returns the list of saved waypoints.
          content:
            application/json:
              schema:
                type: array
                maxItems: 10
                x-count: 3
                items:
                  $ref: '#/components/schemas/WaypointOrder'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /waypoint/{user}:
    post:
      tags:
        - waypoint
      summary: Saves a waypoint.
      operationId: create
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: string
            example: 'testId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Waypoint'
      responses:
        '200':
          description: The created waypoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedWaypoint'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - waypoint
      summary: Deletes a waypoint.
      operationId: delete
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: string
            example: 'testId'
        - in: query
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Empty response when success.
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
    Id:
      type: number
      x-faker: 'random.number({ "min": 0, "max": 99 })'
      x-go-type: 'uint64'
    Waypoint:
      type: object
      required:
        - coordinates
        - name
      properties:
        coordinates:
          type: object
          x-go-type: 'postgis.Point'
          properties:
            X:
              type: number
              format: float
              minimum: -180
              maximum: 180
              x-faker: address.longitude
            Y:
              type: number
              format: float
              minimum: -90
              maximum: 90
              x-faker: address.latitude
        name:
          type: string
          x-faker: '{{address.streetAddress}}, {{address.zipCode}} {{address.cityName}}, {{address.country}}'
    WaypointOrder:
      type: object
      required:
        - id
        - order
      properties:
        id:
          schema:
            $ref: '#/components/schemas/Id'
        order:
          type: number
          x-go-type: 'uint8'
          x-faker: 'random.number({ "min": 0, "max": 9 })'
    SavedWaypoint:
      allOf:
        - $ref: '#/components/schemas/Waypoint'
        - $ref: '#/components/schemas/WaypointOrder'
