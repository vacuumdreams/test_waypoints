// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/cridenour/go-postgis"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// SavedWaypoint defines model for SavedWaypoint.
type SavedWaypoint struct {
	// Embedded struct due to allOf(#/components/schemas/Waypoint)
	Waypoint `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/WaypointOrder)
	WaypointOrder `yaml:",inline"`
}

// Waypoint defines model for Waypoint.
type Waypoint struct {
	Coordinates postgis.Point `json:"coordinates"`
	Name        string        `json:"name"`
}

// WaypointOrder defines model for WaypointOrder.
type WaypointOrder struct {
	Id    string  `json:"id"`
	Order float32 `json:"order"`
}

// CreateJSONBody defines parameters for Create.
type CreateJSONBody Waypoint

// UpdateOrderJSONBody defines parameters for UpdateOrder.
type UpdateOrderJSONBody []WaypointOrder

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody CreateJSONBody

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody UpdateOrderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Saves a waypoint.
	// (POST /waypoint/{user})
	Create(w http.ResponseWriter, r *http.Request, user string)
	// Returns the list of saved waypoints.
	// (GET /waypoints/{user})
	List(w http.ResponseWriter, r *http.Request, user string)
	// Updates waypoint order.
	// (PUT /waypoints/{user})
	UpdateOrder(w http.ResponseWriter, r *http.Request, user string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Create operation middleware
func (siw *ServerInterfaceWrapper) Create(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Create(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// List operation middleware
func (siw *ServerInterfaceWrapper) List(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.List(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateOrder(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/waypoint/{user}", wrapper.Create)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/waypoints/{user}", wrapper.List)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/waypoints/{user}", wrapper.UpdateOrder)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/jRBD9K62CA0ieOGE57PRtWHGItGJXfAik3Tn0uitOL+4PusphguX/jrrtZOxJ",
	"ZghiQOwl6q/q96pe9Ys7qLwN3qFjAtkBVVu0Kg+/jdHHNAjRB4xsMC9bJFI1piHvA4IE4mhcDX1fHFb8",
	"h49YMfQF/KB2qH9W++CN4xSjmubNBuS7Dj6PuAEJn5X3DMoRvjxG9MVlB99EjRH6276AKdqceuV91MYp",
	"HqbzzV/Sz8ZHqxgkbBqvGAqw6s7Y1oJcvVwWYI0bZld5OmbrWvsBIxRwd7VRv2IECUrriESLxrvacKsx",
	"1YJji0+DXM8wri+DUDwinNQ/Ha/91bgYPHFtaPF2LCw4Zc/IOMXougMKcUTkm2HW94W43/rDhFdeY99P",
	"1irD+++UxfnJyreO477vM9eIv7Umogb5bqbMSOz2TDfN1T6R0Oin04nKaW8XbWt0us0fbnm8yGPEsPNF",
	"J94ned6DFMsijdVdGl+L/suTjIyGA8JpJumwcRufwDVSFU1g4x3IY4aC2EdVo6g9YdxlWmy4wemZm7dr",
	"KGCHkYbg1WK5WObMAjoVDEh4kZcKCIq3uUbl72N02bWEsc9V9JRfS6qlSkTWGiS8iqgYc2xUFhkj5Xdr",
	"ElS676CUhHQTTPNPrV6MZpJuxjtlQybPSLxOtXloHrdDPBJ/4/V+eK6OcXSNEBpTZW7lR0rJdpPbL3OS",
	"uUKJYV6g4B0N/fPVcvlsuHPjy+BzpX/coqhyibU4aLJI4n39jCwGDz+DvnY71RgtxpIvcv9Sa62Ke5DZ",
	"tkmoCbECWNWpAeCwBrcp5thPNGmoGs/002tD/N920z+Q1jBa+psaZyNfD4Gre+9WMap9dpXsfyBfnNHj",
	"RlS+abBKU+E3x8LTQ2W+R26jI8FbFI0hTocp8ZiGnBWrgNCekeWnoBXj4KifwFu/SJgHXwVPCvMv+MKz",
	"c/yL5rmoJ/4nzjK0Gx2Zifwf+Zi/pND89ze04xzpta9UI4Z90cYGCki/ErbMQZZlk/a3nli+XC5XpQqm",
	"3K3SN+KfAQAA//+1nO769QoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
