// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/cridenour/go-postgis"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Id defines model for Id.
type Id uint64

// SavedWaypoint defines model for SavedWaypoint.
type SavedWaypoint struct {
	// Embedded struct due to allOf(#/components/schemas/Waypoint)
	Waypoint `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/WaypointOrder)
	WaypointOrder `yaml:",inline"`
}

// Waypoint defines model for Waypoint.
type Waypoint struct {
	Coordinates postgis.Point `json:"coordinates"`
	Name        string        `json:"name"`
}

// WaypointOrder defines model for WaypointOrder.
type WaypointOrder struct {
	Id    interface{} `json:"id"`
	Order uint8       `json:"order"`
}

// DeleteParams defines parameters for Delete.
type DeleteParams struct {
	Id Id `json:"id"`
}

// CreateJSONBody defines parameters for Create.
type CreateJSONBody Waypoint

// UpdateOrderJSONBody defines parameters for UpdateOrder.
type UpdateOrderJSONBody []WaypointOrder

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody CreateJSONBody

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody UpdateOrderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Deletes a waypoint.
	// (DELETE /waypoint/{user})
	Delete(w http.ResponseWriter, r *http.Request, user string, params DeleteParams)
	// Saves a waypoint.
	// (POST /waypoint/{user})
	Create(w http.ResponseWriter, r *http.Request, user string)
	// Returns the list of saved waypoints.
	// (GET /waypoints/{user})
	List(w http.ResponseWriter, r *http.Request, user string)
	// Updates waypoint order.
	// (PUT /waypoints/{user})
	UpdateOrder(w http.ResponseWriter, r *http.Request, user string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Delete operation middleware
func (siw *ServerInterfaceWrapper) Delete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteParams

	// ------------- Required query parameter "id" -------------
	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		http.Error(w, "Query argument id is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Delete(w, r, user, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Create operation middleware
func (siw *ServerInterfaceWrapper) Create(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Create(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// List operation middleware
func (siw *ServerInterfaceWrapper) List(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.List(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateOrder(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/waypoint/{user}", wrapper.Delete)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/waypoint/{user}", wrapper.Create)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/waypoints/{user}", wrapper.List)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/waypoints/{user}", wrapper.UpdateOrder)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXS4/bNhD+K8S0hxbQWnYTFLu6bdMcDARN0AdaINkDI45tphLJcEbOqob+ezGUH1Ls",
	"3bjINthcDL6GM/N93wzlDZS+Dt6hY4JiA1SusNZp+DxGH2UQog8Y2WJarpFIL1GG3AaEAoijdUvoumy3",
	"4t++w5Khy2BuBgddU7/FCBncXiz03xihgKid8fWk3/luo95Abd0bKNQ0k7G+lfHVleq+T2ZLf7G9q7GO",
	"f3wqLn7TazR/6jZ461i86ap6uYDi9Qa+jbiAAr7JD0nm2wzzvUWXnXfwZTQYobvpMhh6G6NTeh+NdZr7",
	"6XjzL/lZ+FhrhgIWldcMmSRp66aGYnY5zST9fnaRpncjp42JSDSpvFtabgwKFhwbvN/J1cjH1XkuNG89",
	"HFE8JiV44qWlyastsOB0fUIpQx+bzc4LcUTk637WdZk6bP1jwzNvsOsGa6Xl9hdd4/hk6RvHse26FGvE",
	"942NaKB4PWJmG9jNCcGO2T6i0JpDlcjoPuHMTQrC72763Co4XQSXR5laAzuvxxnKYesWXgIySGW0ga13",
	"UOwzV8Q+6iWqpSeM6xQqW65weOb61RwyWGOk3ng2mU6mgp8P6HSwUMCTtJRB0LxK2OUfttb5piGMXR9C",
	"hZwkIihrCUVaBvzcr4t11DUyRkoVbcWZ3LjjsAC5C4YISBFkA47wVtchhc9IPBd0jjrX9ub3Dcb2cHVC",
	"8u6LP0n+jVhT8I569fwwnR7j/rwO3KrdOfVhhU5RU5YiZ0H0aW9Uese4bXAhVLZMYOXvSC45V5J9T08i",
	"GAcxd2tdWaMkWSSeJFFRU9c6tns6SGm143AiKOqlsAK7NZDeKD3gmM9nEfUX5POmt0fin7xpHwy+w5sx",
	"rjmJsDvN9YP4HT9xJ+j7fYWqTBCbAUOPRDwS/RnS6bJDh6BBi1jiCT29sMRfVk2fQa1lrOk/cpye7Hlv",
	"ODu80jpG3aZXIL10UDw5wce1Kn1VYSlT5Rd74OljZn5FbqIjxStUlSWWwyRxDE3uqvPmBC1/BKMZ+7fz",
	"K6j1s4j56PvvXmL+h77w4DF+QjxnaeKRdJZebrSPTKWvnrv6i5imD5pejmNPL3ypK9XvqyZWkIH8FrBi",
	"DkWeV7K/8sTF5XQ6y3Ww+Xom/wb+DQAA//9vJnG+Qg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
