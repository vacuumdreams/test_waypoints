// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/cridenour/go-postgis"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// SavedWaypoint defines model for SavedWaypoint.
type SavedWaypoint struct {
	// Embedded struct due to allOf(#/components/schemas/Waypoint)
	Waypoint `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/WaypointOrder)
	WaypointOrder `yaml:",inline"`
}

// Waypoint defines model for Waypoint.
type Waypoint struct {
	Coordinates postgis.Point `json:"coordinates"`
	Name        string        `json:"name"`
}

// WaypointOrder defines model for WaypointOrder.
type WaypointOrder struct {
	Id    uint64 `json:"id"`
	Order uint8  `json:"order"`
}

// DeleteParams defines parameters for Delete.
type DeleteParams struct {
	Id uint64 `json:"id"`
}

// CreateJSONBody defines parameters for Create.
type CreateJSONBody Waypoint

// UpdateOrderJSONBody defines parameters for UpdateOrder.
type UpdateOrderJSONBody []WaypointOrder

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody CreateJSONBody

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody UpdateOrderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Deletes a waypoint.
	// (DELETE /api/v1/waypoint/{user})
	Delete(w http.ResponseWriter, r *http.Request, user string, params DeleteParams)
	// Saves a waypoint.
	// (POST /api/v1/waypoint/{user})
	Create(w http.ResponseWriter, r *http.Request, user string)
	// Returns the list of saved waypoints.
	// (GET /api/v1/waypoints/{user})
	List(w http.ResponseWriter, r *http.Request, user string)
	// Updates waypoint order.
	// (PUT /api/v1/waypoints/{user})
	UpdateOrder(w http.ResponseWriter, r *http.Request, user string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Delete operation middleware
func (siw *ServerInterfaceWrapper) Delete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteParams

	// ------------- Required query parameter "id" -------------
	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		http.Error(w, "Query argument id is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Delete(w, r, user, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Create operation middleware
func (siw *ServerInterfaceWrapper) Create(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Create(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// List operation middleware
func (siw *ServerInterfaceWrapper) List(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.List(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter user: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateOrder(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/waypoint/{user}", wrapper.Delete)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/waypoint/{user}", wrapper.Create)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/waypoints/{user}", wrapper.List)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/waypoints/{user}", wrapper.UpdateOrder)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTY/bNhD9K8S0hxbQWnYTFLu6bdMcDARN0A+0QLIHRhrLTMWPkCNnVUP/vRhKtqWV",
	"snWbbbC5GPyc9/TecEjvIbfaWYOGAmR7CPkWtYzN595bzw3nrUNPCuOwxhBkidykxiFkEMgrU0LbJocR",
	"+/Yd5gRtAr/IHRa/y8ZZZYj3yKp6uYHs9R6+9riBDL5KTwzSHj497miT8xa+9AV6aG/aBIZoY+q5tb5Q",
	"RlLXHU/+wT8b67UkyGBTWUmQgJa3StcastXlMgGtTNe7iN3+a02t36KHBG4vNvJP9JCBLAqPISwqa0pF",
	"dYGsBfka7we5GmFcnQchqUeY6M/LS3vRDzobqFRh8aoXFozUMzYOMfb7A0ogj0jXXa9tE3Ga+ku5Z7bA",
	"th2M5Yqan6TG8crc1oZ807aRq8f3tfJYQPZ65ExP7GYmm8ZuTyxUxeBzZiTz0hRWL7qZb/biDYv9BjKx",
	"TLgtb7l9dSXab+9IVytD3z9lBvaA/Kko8yCXE2VUAQfUqSK8WJmNZUIFhtwrR8oayI5KiUDWyxJFaQP6",
	"XaRKiiocrrl+tYYEduhDt3m1WC6W8WsdGukUZPAkDiXgJG2j1ql0Kt2t0g99kHRfB/Rtx6RCipnF5khm",
	"tC4ggx+7cQ7ipUZCH2IhUIzJgQ/WZ8CxYCgEn52kr04cGW+ldvErCAOtWaRJNeojv6/RN6fQUdD/Enhg",
	"9TQz2hsOGpw1ocvF75bLqSvPtaNGHNaJD1s0ItR5zoeD9X7abcqtIezLpXOVyqOG6bvAQfYDsvdVxq58",
	"xxQZk1ibnaxUIVgDDLSIKRdqraVvji4FIcXB2gVrIEs2Cw5jwJWWK8rU5mce5We0+abbj4F+sEXzYPKd",
	"bqDxiWSG7bzXD4I7vjBn7Pt1iyKPEhcDhx5J8jD7M1KnTSb1IwwKSIkzafVCBfq8SfUJDitCHf6l1fEd",
	"sO42rk5Xv/ReNrHqxOsTsicztlyL3FYV5twVdnPUP9w16Gek2psgaIuiUoF4cWAewy0fO+71jC2/uUIS",
	"dhfyF3DkzzLmzqPyXmP+h/Lw4Bz/IXnOyolHUmC6dAtHZiI+jT5WZnhrfPV06ThGemFzWYluXtS+ggT4",
	"N4MtkcvStOL5rQ2UXS6XK/5v8XcAAAD//4agmpUtDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
